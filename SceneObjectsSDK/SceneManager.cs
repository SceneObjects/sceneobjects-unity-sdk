// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using LitJson;

namespace SceneObjectsSDK
{
	public class SceneManager : MonoBehaviour {
		
		// Use this for initialization
		IEnumerator Start () {
			WWW sceneObjectsRequest = new WWW ("http://localhost:3000/scene_objects.json");
			
			yield return sceneObjectsRequest;
			
			if (sceneObjectsRequest.error != null) {
				Debug.Log("ERROR downloading scene objects:" + sceneObjectsRequest.error);
			} else {
				Debug.Log("Successfully loaded scene objects" + sceneObjectsRequest.text);
				
				SceneObjects sceneObjects = JsonMapper.ToObject<SceneObjects>(sceneObjectsRequest.text);
				CreateSceneObjects(sceneObjects);
			}
		}
		
		void CreateSceneObjects (SceneObjects sceneObjects) {
			for (int i = 0; i < sceneObjects.objects.Count; i++) {
				StartCoroutine(CreateSceneObject((SceneObject)sceneObjects.objects[i]));
			}
		}
		
		
		IEnumerator CreateSceneObject (SceneObject sceneObject) {
			
			GameObject gameObject = new GameObject(sceneObject.name);
			
			// Add components
			Rigidbody rigidbody = gameObject.AddComponent<Rigidbody>();
			MeshFilter meshFilter = gameObject.AddComponent<MeshFilter>();
			MeshRenderer renderer = gameObject.AddComponent<MeshRenderer>();
			Debug.Log(rigidbody);
			Debug.Log(meshFilter);
			Debug.Log(renderer);
			
			if (sceneObject.texture_url != null) {
				WWW gameObjectTextureImage = new WWW (sceneObject.texture_url);
				yield return gameObjectTextureImage;
				Debug.Log (gameObjectTextureImage.size);
				if (gameObjectTextureImage.error != null) {
					Debug.Log ("ERROR downloading texture image:" + gameObjectTextureImage.error);
				} else {
					int width = gameObjectTextureImage.texture.width;
					int height = gameObjectTextureImage.texture.height;
					float scaleX = (float)width / height;
					float scaleY = (float)height / width;
					Debug.Log (scaleX);
					Debug.Log (scaleY);
				}
			}
			
			if (sceneObject.kind == "Cube") {
				gameObject.AddComponent<BoxCollider> ();
			} else if (sceneObject.kind == "Sphere") {
				gameObject.AddComponent<SphereCollider> ();
			}
			
			gameObject.transform.localScale = new Vector3((float)sceneObject.scale[0], (float)sceneObject.scale[1], (float)sceneObject.scale[2]);
			gameObject.transform.localEulerAngles = new Vector3((float)sceneObject.rotation[0], (float)sceneObject.rotation[1], (float)sceneObject.rotation[2]);
			gameObject.transform.localPosition = new Vector3((float)sceneObject.position[0], (float)sceneObject.position[1], (float)sceneObject.position[2]);
			
		}
		
		// Update is called once per frame
		void Update () {
		}
		
	}
	public class SceneObject {
		public int id { get; set; }
		public string name { get; set; }
		public string kind { get; set; }
		public string texture_url { get; set; }
		public string texture_type { get; set; }
		public string url { get; set; }
		public double[] position { get; set; }
		public double[] scale { get; set; }
		public double[] rotation { get; set; }
		public bool locked { get; set; }
		public bool hidden { get; set; }
	}
	
	public class SceneObjects {
		public List<SceneObject> objects { get; set; }
	}
}

